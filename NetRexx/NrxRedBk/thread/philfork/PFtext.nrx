/* thread\philfork\PFtext.nrx

   Philosophers Forks in a text Window */

class PFtext public 

  properties static public
    eat    = int 6000                         -- eat time (ms)
    sleep  = int 8000                         -- sleep time (ms)
    cycles = int 2                            -- number of cycles
    side   = double 0.5                       -- fork pickup (L,R,random)

  method main(args=String[]) static
    nuarg = args.length
    if nuarg > 3 then side   = Rexx args[3]
    if nuarg > 2 then cycles = Rexx args[2]
    if nuarg > 1 then eat    = (Rexx args[1]) * 1000
    if nuarg > 0 then sleep  = (Rexx args[0]) * 1000
    if      side = 'L' then side = 1.0        -- left fork first  
    else if side = 'R' then side = 0          -- right            
                       else side = 0.5        -- random           
    run()                                     -----------> RUN IT

  method run() static
    f1 = ForkText()                           -- create 5 forks   
    f2 = ForkText()  
    f3 = ForkText()   
    f4 = ForkText()    
    f5 = ForkText()
    p1 = PhilText(1,f5,f1)                    -- create 5 philos. 
    p2 = PhilText(2,f1,f2)
    p3 = PhilText(3,f2,f3)
    p4 = PhilText(4,f3,f4)
    p5 = PhilText(5,f4,f5)
    p1.start()                                -- run 5 philsophers
    p2.start()
    p3.start()
    p4.start()
    p5.start()


------------------------ philosopher ---------------------------------

class PhilText extends Thread    

  properties private
    num   = int                               -- number
    lfork = ForkText                          -- left fork
    rfork = ForkText                          -- right fork
    out   = Rexx                              -- prefix

  method PhilText(nump=int, lforkp=ForkText, rforkp=ForkText)
    num   = nump
    lfork = lforkp
    rfork = rforkp
    out   = ' '.copies(15*num-14) 

  method run() public                         -- run the philosop.
    say out 'Philosopher-'num
    loop for PFtext.cycles                    -- run the loop   
       stime = PFtext.sleep % 2 + PFtext.sleep * Math.random() % 1 
       say out 'Sleep-'(Rexx stime/1000).format(2,1)
       sleep(stime)                           -- sleep          
       say out 'Wait'
       if Math.random() <= PFtext.side then do -- pick up forks  
          lfork.pickup()
          rfork.pickup()
          end
       else do                                -- same, right    
          rfork.pickup()
          lfork.pickup()
       end
       etime = PFtext.eat % 2 + PFtext.eat * Math.random() % 1 
       say out 'Eat-'(Rexx etime/1000).format(2,1)
       sleep(etime)                           -- eat            
       lfork.laydown()                        -- lay down forks 
       rfork.laydown()        
     catch InterruptedException
    end
    say out 'Done'                            -- loop finished    


------------------------ fork ----------------------------------------

class ForkText

  properties private
    used  = boolean 0                         -- flag is fork in use

  method ForkText()                           -- constructor

  method pickup protect -                     -- pickup the fork  
         signals InterruptedException         
    if used then wait()                       -- wait for fork
    used = boolean 1                          -- take it

  method laydown protect                      -- laydown the fork 
    used = boolean 0                          -- set to free    
    notify()                                  -- let others run
