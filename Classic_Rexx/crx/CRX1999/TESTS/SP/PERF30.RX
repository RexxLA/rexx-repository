/* Performance testing. */
/* Rexx30 hung on 100 million. */
say"   do 10000000 /* Ten million */"
say"   end"
  call time('R')
   do 10000000 /* Ten million */
   end
  say time('E')
say "About 13 mega Rexx-Clauses-Per-Second on my 200MHz Pentium Pro."
say "Rough equivalent 'C', while(j--), is 2.5 times faster compiled for Dos"
say "Object Rexx on Warp is about xxx MegaCPS."
say ""
say "You might think adding a NOP in the loop would tell us how long NOP takes."
say ""
  call time('R')
  call time('R')
   do 10000000 /* Ten million */
    nop
    end
  say time('E')
say "But the total time much more than doubles on my machine."
say "NOP has less work to do than ITERATE, so how come?"
say "Presumably the smaller loop takes more advantage of hardware cacheing."
say "Suppose we make the an outer loop 2  and use 9 NOP's, getting 2  million"
say "executions of ITERATE plus 18  million of NOP. (Versus 10  plus 10 )"
  call time('R')
  do 2
   do 1000000 /* A million */
   nop
   nop
   nop
   nop
   nop
   nop
   nop
   nop
   nop
   end
  end
  say time('E')
say "That is quicker, reflecting that NOPs really are cheaper than ITERATEs."
say "The lesson is that only rough measurement meaningful, about 10 MegaCPS"
say "for the minimal clause."
say "An assignment implies noticeably more data access and movement."
say "Here are 10 million assigns of a constant."
  call time('R')
  do 10000000 /* Ten million */
   c="AbCdEfG"
   end
  say time('E')
say "Here are 10 million assigns of a variable."
  def=99
  call time('R')
  do 10000000 /* Ten million */
   ABC=def
   end
  say time('E')
say "j = 1 to ten million involves assignment to j."
  call time('R')
  do j=1 to 10000000 /* Ten million */
   end
  say time('E')
say "Here are 10 million integer additions."
  def=99
  abc=0
  call time('R')
  do 10000000 /* Ten million */
   ABC=ABC+def
   end
  say time('E')
  exit
