/* REXX */                                                                      
/*                                       */                                     
/* AUTHOR: Mark Zelden                   */                                     
/*                                       */                                     
/* Trace ?r */                                                                  
/*********************************************************************/         
/* DISPLAY LPA, LNKLST, AND APF LIBRARY LISTS ON TERMINAL            */         
/*********************************************************************/         
/*                                                                   */         
/* NOTE: The dynamic APF and dynamic LNKLST code in this exec        */         
/*       use undocumented IBM control blocks and may break at        */         
/*       any time!                                                   */         
/*    ... tested on MVS ESA 4.3, OS/390, and up to z/OS 1.9.         */         
/*                                                                   */         
/* NOTE: The LNKLST SET displayed is the LNKLST SET of the address   */         
/*       space running this program, not necessarily the most        */         
/*       current one. For the current LNKLST SET either:             */         
/*       1) Run this exec in batch.                                  */         
/*       2) Log off and on TSO before executing this exec.           */         
/*       3) Issue SETPROG LNKLST,UPDATE,JOB=userid  (B4 execution)   */         
/*                                                                   */         
/* NOTE: The APF flag in the LNKLST display is the status if the     */         
/*       data set is accessed VIA LNKLST. Therefore, if IEASYSxx     */         
/*       specifies LNKAUTH=LNKLST, all entires are marked as APF=Y.  */         
/*********************************************************************/         
/* EXECUTION SYNTAX:                                                 */         
/*                                                                   */         
/* TSO %LPROG <option>                                               */         
/*                                                                   */         
/* VALID OPTIONS ARE 'ALL' (default), 'LNK' or 'LINK', 'APF', & 'LPA'*/         
/*                                                                   */         
/* Examples:                                                         */         
/*  TSO %LPROG       (display LPA list, LNKLST, and APF list)        */         
/*  TSO %LPROG LPA   (display LPA list)                              */         
/*  TSO %LPROG LNK   (display LNKLST)                                */         
/*  TSO %LPROG LINK  (display LNKLST)                                */         
/*  TSO %LPROG APF   (display APF list)                              */         
/*                                                                   */         
/*********************************************************************/         
/*  CVTLLTA LAYOUT (OFFSET 1244 IN CVT): (STATIC LNKLST)             */         
/*         DESC                       LEN                            */         
/*         ------------------------   ---                            */         
/*         CONSTANT 'LLT '             4                             */         
/*         NUMBER OF ENTRIES           4                             */         
/*         LENGTH OF DSN               1                             */         
/*         DSN (PADDED WITH BLANKS)    44                            */         
/*********************************************************************/         
/*  LPAT LAYOUT  (OFFSET 0 IN CVTEPLPS / START OF EXT. LPA):         */         
/*         DESC                       LEN                            */         
/*         ------------------------   ---                            */         
/*         CONSTANT 'LPAT'             4                             */         
/*         NUMBER OF ENTRIES           4                             */         
/*         LENGTH OF DSN               1                             */         
/*         DSN (PADDED WITH BLANKS)    44                            */         
/*********************************************************************/         
/*  CVTAUTHL LAYOUT (OFFSET 484 IN CVT):      (STATIC APF LIST)      */         
/*         DESC                       LEN                            */         
/*         ------------------------   ---                            */         
/*         NUMBER OF ENTRIES           2                             */         
/*         LENGTH OF ENTRY             1                             */         
/*         VOLUME                      6                             */         
/*         DSN                       VARIABLE                        */         
/*********************************************************************/         
LASTUPD = '12/13/2007'                       /* date of last update  */         
/*********************************************************************/         
Arg OPTION                                                                      
Parse source . . . . . . . ENV . .                                              
If ENV <> 'OMVS' then                        /* are we under unix ?  */         
  If Sysvar('SYSISPF')='ACTIVE' then do      /* no, is ISPF active?  */         
    Address ISREDIT "MACRO (OPTION)"    /* YES - allow use as macro  */         
    OPTION = Translate(OPTION)   /* ensure upper case for edit macro */         
    Address ISPEXEC "VGET ZENVIR"            /* ispf version         */         
    SYSISPF = 'ACTIVE'                       /* set SYSISPF = ACTIVE */         
  End                                                                           
If ENV = 'OMVS' then do                    /* Are we under OMVS?     */         
  Do CKWEB = __ENVIRONMENT.0 to 1 by -1    /* check env. vars        */         
     If pos('HTTP_',__ENVIRONMENT.CKWEB) <> 0 then do  /* web server */         
       Say 'Content-type: text/html'                                            
       Say ''                                                                   
       Say '<title>Mark''s MVS Utilities - LPROG</title>'                       
       Say '<meta name="author" content="Mark Zelden -' ,                       
           'mzelden@flash.net">'                                                
       Say '<meta name="description" content="' || ,                            
           'LPROG -' OPTION 'option.' ,                                         
           'Last updated on' LASTUPD ||'. Written by' ,                         
           'Mark Zelden. Mark''s MVS Utilities -' ,                             
           'http://home.flash.net/~mzelden/mvsutil.html">'                      
       Say '<meta http-equiv="pragma" content="no-cache">'                      
       Say '<body BGCOLOR="#000000" TEXT="#00FFFF">'                            
       Say '<pre>'                                                              
       Leave                               /* exit loop              */         
     End /* if pos */                                                           
  End /* do CKWEB */                                                            
End                                                                             
OPTION = Translate(OPTION)  /* chg to UC for edit macro invocation   */         
If OPTION = ' ' then OPTION = 'ALL'                                             
If OPTION <> 'APF' & OPTION <> 'LNK' & OPTION <> 'LINK' & ,                     
   OPTION <> 'LPA' & OPTION <> 'ALL' then do                                    
  Say 'INVALID OPTION. THE OPTION MUST BE "APF", "LNK" or "LINK",' ,            
      '"LPA", OR "ALL".'                                                        
  Exit 12                                                                       
End                                                                             
/*                                                                   */         
CVT      = C2d(Storage(10,4))                /* point to CVT         */         
FMIDNUM  = Storage(D2x(CVT - 32),7)          /* point to fmid        */         
/*                                                                   */         
If OPTION = 'LPA' | OPTION = 'ALL' then do                                      
  CVTSMEXT = C2d(Storage(D2x(CVT + 1196),4)) /* point to stg map ext.*/         
  CVTEPLPS = C2d(Storage(D2x(CVTSMEXT+56),4)) /* point to stg map ext*/         
  NUMLPA   = C2d(Storage(D2x(CVTEPLPS+4),4)) /* # LPA libs in table  */         
  LPAOFF   = 8                               /* first ent in LPA tbl */         
  Queue 'LPA LIBRARY LIST  ('NUMLPA' LIBRARIES)'                                
  Queue '     '                                                                 
  Queue '  POSITION    DSNAME'                                                  
  Do I = 1 to NUMLPA                                                            
     LEN   = C2d(Storage(D2x(CVTEPLPS+LPAOFF),1)) /* length of entry */         
     LPDSN = Storage(D2x(CVTEPLPS+LPAOFF+1),LEN) /*DSN of LPA library*/         
     LPAOFF = LPAOFF + 44 + 1                  /* next entry in table*/         
     LPAPOS = Right(I,3)                       /*position in LPA list*/         
     RELLPPOS = Right('(+'I-1')',6)      /* relative position in list*/         
     Queue LPAPOS  RELLPPOS '  ' LPDSN                                          
  End                                                                           
End                                                                             
If OPTION = 'ALL'  then do                                                      
  Queue '     '                                                                 
  Queue '----------------------------------------------------'                  
  Queue '     '                                                                 
End                                                                             
If OPTION = 'LNK' | OPTION = 'LINK' |  OPTION = 'ALL' then do                   
  If Substr(FMIDNUM,4,4) < 6602 then do                                         
    CVTLLTA  = C2d(Storage(D2x(CVT + 1244),4)) /* point to lnklst tbl*/         
    NUMLNK   = C2d(Storage(D2x(CVTLLTA+4),4))  /* # LNK libs in table*/         
    LLTAPFTB = CVTLLTA + 8 + (NUMLNK*45)       /* start of LLTAPFTB  */         
    LNKOFF   = 8                               /*first ent in LBK tbl*/         
    LKAPFOFF = 0                              /*first ent in LLTAPFTB*/         
    Queue 'LNKLST LIBRARY LIST  ('NUMLNK' LIBRARIES)'                           
    Queue '     '                                                               
    Queue '  POSITION    APF    DSNAME'                                         
    Do I = 1 to NUMLNK                                                          
       LEN = C2d(Storage(D2x(CVTLLTA+LNKOFF),1))  /* length of entry */         
       LKDSN = Storage(D2x(CVTLLTA+LNKOFF+1),LEN) /* DSN of LNK lib  */         
       CHKAPF = Storage(D2x(LLTAPFTB+LKAPFOFF),1) /* APF flag        */         
       If  bitand(CHKAPF,'80'x) = '80'x then LKAPF = 'Y' /* flag on  */         
         else LKAPF = ' '                         /* APF flag off    */         
       LNKOFF = LNKOFF + 44 + 1                   /*next entry in tbl*/         
       LKAPFOFF = LKAPFOFF + 1            /* next entry in LLTAPFTB  */         
       LNKPOS = Right(I,3)                        /*position in list */         
       RELLKPOS = Right('(+'I-1')',6)   /* relative position in list */         
       Queue LNKPOS  RELLKPOS '   ' LKAPF '   ' LKDSN                           
    End                                                                         
  End                                                                           
  Else do  /* OS/390 1.2 and above - PROGxx capable LNKLST           */         
    ASCB     = C2d(Storage(224,4))             /* point to ASCB      */         
    ASSB     = C2d(Storage(D2x(ASCB+336),4))   /* point to ASSB      */         
    DLCB     = C2d(Storage(D2x(ASSB+236),4))   /* point to CSVDLCB   */         
    DLCBFLGS = Storage(d2x(DLCB + 32),1)       /* DLCB flag bits     */         
    SETNAME  = Storage(D2x(DLCB + 36),16)      /* LNKLST set name    */         
    SETNAME  = Strip(SETNAME,'T')              /* del trailing blanks*/         
    CVTLLTA  = C2d(Storage(D2x(DLCB + 16),4))  /* point to lnklst tbl*/         
    LLTX     = C2d(Storage(D2x(DLCB + 20),4))  /* point to LLTX      */         
    NUMLNK   = C2d(Storage(D2x(CVTLLTA+4),4))  /* # LNK libs in table*/         
    LLTAPFTB = CVTLLTA + 8 + (NUMLNK*45)       /* start of LLTAPFTB  */         
    LNKOFF   = 8                               /*first ent in LLT tbl*/         
    VOLOFF   = 8                               /*first ent in LLTX   */         
    LKAPFOFF = 0                              /*first ent in LLTAPFTB*/         
    If Bitand(DLCBFLGS,'10'x) = '10'x then ,   /* bit for LNKAUTH    */         
         LAUTH = 'LNKLST'                      /* LNKAUTH=LNKLST     */         
    Else LAUTH = 'APFTAB'                      /* LNKAUTH=APFTAB     */         
    Queue 'LNKLST LIBRARY LIST - SET:' SETNAME ,                                
          ' LNKAUTH='LAUTH '('NUMLNK' LIBRARIES):'                              
    If LAUTH = 'LNKLST' then ,                                                  
      Queue '     (ALL LNKLST DATA SETS MARKED APF=Y DUE TO' ,                  
            'LNKAUTH=LNKLST)'                                                   
    Queue '     '                                                               
    Queue '  POSITION    APF   VOLUME    DSNAME'                                
    Do I = 1 to NUMLNK                                                          
       LEN = C2d(Storage(D2x(CVTLLTA+LNKOFF),1))  /* length of entry */         
       LKDSN = Storage(D2x(CVTLLTA+LNKOFF+1),LEN) /* DSN of LNK lib  */         
       LNKVOL = Storage(D2x(LLTX+VOLOFF),6)       /* VOL of LNK lib  */         
       CHKAPF = Storage(D2x(LLTAPFTB+LKAPFOFF),1) /* APF flag        */         
       If  bitand(CHKAPF,'80'x) = '80'x then LKAPF = 'Y' /* flag on  */         
         else LKAPF = ' '                         /* APF flag off    */         
       LNKOFF   = LNKOFF + 44 + 1                 /*next entry in LLT*/         
       VOLOFF   = VOLOFF + 8                      /*next vol in LLTX */         
       LKAPFOFF = LKAPFOFF + 1            /* next entry in LLTAPFTB  */         
       LNKPOS   = Right(I,3)                      /*position in list */         
       RELLKPOS = Right('(+'I-1')',6)   /* relative position in list */         
       Queue LNKPOS  RELLKPOS '   ' LKAPF '  ' LNKVOL '  ' LKDSN                
    End                                                                         
  End                                                                           
End                                                                             
If OPTION = 'ALL'  then do                                                      
  Queue '     '                                                                 
  Queue '----------------------------------------------------'                  
  Queue '     '                                                                 
End                                                                             
If OPTION = 'APF' | OPTION = 'ALL' then do                                      
  NUMERIC  DIGITS 10                                                            
  CVTAUTHL = C2d(Storage(D2x(CVT + 484),4))  /* point to auth lib tbl*/         
  If CVTAUTHL <> C2d('7FFFF001'x) then do    /* dynamic list ?       */         
    NUMAPF   = C2d(Storage(D2x(CVTAUTHL),2)) /* # APF libs in table  */         
    APFOFF   = 2                             /* first ent in APF tbl */         
    Queue 'APF LIBRARY LIST  ('NUMAPF' LIBRARIES)'                              
    Queue '     '                                                               
    Queue 'ENTRY   VOLUME    DSNAME'                                            
    Do I = 1 to NUMAPF                                                          
       LEN = C2d(Storage(D2x(CVTAUTHL+APFOFF),1)) /* length of entry */         
       VOL = Storage(D2x(CVTAUTHL+APFOFF+1),6)  /* VOLSER of APF LIB */         
       DSN = Storage(D2x(CVTAUTHL+APFOFF+1+6),LEN-6) /* DSN of apflib*/         
       APFOFF = APFOFF + LEN +1                                                 
       APFPOS   = Right(I,4)                   /*position in APF list*/         
       Queue APFPOS '  ' VOL '  ' DSN                                           
    End                                                                         
  End                                                                           
  Else Do                                                                       
    ECVT     = C2d(Storage(D2x(CVT + 140),4))  /* point to CVTECVT   */         
    ECVTCSVT = C2d(Storage(D2x(ECVT + 228),4)) /* point to CSV table */         
    APFA = C2d(Storage(D2x(ECVTCSVT + 12),4))  /* APFA               */         
    AFIRST = C2d(Storage(D2x(APFA + 8),4))     /* First entry        */         
    ALAST  = C2d(Storage(D2x(APFA + 12),4))    /* Last  entry        */         
    LASTONE = 0   /* flag for end of list      */                               
    NUMAPF = 1    /* tot # of entries in list  */                               
    Do forever                                                                  
       DSN.NUMAPF = Storage(D2x(AFIRST+24),44) /* DSN of APF library */         
       DSN.NUMAPF = Strip(DSN.NUMAPF,'T')      /* remove blanks      */         
       CKSMS = Storage(D2x(AFIRST+4),1)        /* DSN of APF library */         
       if  bitand(CKSMS,'80'x)  = '80'x        /*  SMS data set?     */         
         then VOL.NUMAPF = '*SMS* '            /* SMS control dsn    */         
       else VOL.NUMAPF = Storage(D2x(AFIRST+68),6) /* VOL of APF lib */         
       If Substr(DSN.NUMAPF,1,1) <> X2c('00')  /* check for deleted  */         
         then NUMAPF = NUMAPF + 1              /*   APF entry        */         
       AFIRST = C2d(Storage(D2x(AFIRST + 8),4)) /* next  entry       */         
       if LASTONE = 1 then leave                                                
       If  AFIRST = ALAST then LASTONE = 1                                      
    End                                                                         
    Queue 'APF LIBRARY LIST  - DYNAMIC ('NUMAPF - 1' LIBRARIES)'                
    Queue '     '                                                               
    Queue 'ENTRY   VOLUME    DSNAME'                                            
    Do I = 1 to NUMAPF-1                                                        
       APFPOS   = Right(I,4)                   /*position in APF list*/         
       Queue APFPOS '  ' VOL.I '  ' DSN.I                                       
    End                                                                         
  End                                                                           
End                                                                             
/*                                                                   */         
Queue ''  /* null queue to end stack   */                                       
If SYSISPF = 'ACTIVE' then call BROWSE_ISPF                                     
Else do queued()                                                                
 Parse pull line                                                                
 Say line                                                                       
End                                                                             
Exit 0                                                                          
                                                                                
BROWSE_ISPF: /* Browse output if ISPF is active          */                     
Address ISPEXEC "CONTROL ERRORS RETURN"                                         
Address TSO                                                                     
prefix = sysvar('SYSPREF')        /* tso profile prefix            */           
uid    = sysvar('SYSUID')         /* tso userid                    */           
If prefix = '' then prefix = uid  /* use uid if null prefix        */           
If prefix <> '' & prefix <> uid then /* different prefix than uid  */           
   prefix = prefix || '.' || uid /* use  prefix.uid                */           
ddnm1 = 'DDO'||random(1,99999)   /* choose random ddname           */           
ddnm2 = 'DDP'||random(1,99999)   /* choose random ddname           */           
junk = msg('off')                                                               
"ALLOC FILE("||ddnm1||") UNIT(SYSALLDA) NEW TRACKS SPACE(2,1) DELETE",          
      " REUSE LRECL(80) RECFM(F B) BLKSIZE(3120)"                               
"ALLOC FILE("||ddnm2||") UNIT(SYSALLDA) NEW TRACKS SPACE(1,1) DELETE",          
      " REUSE LRECL(80) RECFM(F B) BLKSIZE(3120) DIR(1)"                        
junk = msg('on')                                                                
"Newstack"                                                                      
/*************************/                                                     
/* LPROGP Panel source   */                                                     
/*************************/                                                     
If Substr(ZENVIR,6,1) >= 4 then                                                 
  Queue ")PANEL KEYLIST(ISRSPBC,ISR)"                                           
Queue ")ATTR"                                                                   
Queue "  _ TYPE(INPUT)   INTENS(HIGH) COLOR(TURQ) CAPS(OFF)" ,                  
      "FORMAT(&MIXED)"                                                          
Queue "  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)"                               
Queue "  + TYPE(TEXT)    INTENS(LOW)  COLOR(BLUE)"                              
Queue "  @ TYPE(TEXT)    INTENS(LOW)  COLOR(TURQ)"                              
Queue "  % TYPE(TEXT)    INTENS(HIGH) COLOR(GREEN)"                             
Queue "  ! TYPE(OUTPUT)  INTENS(HIGH) COLOR(TURQ) PAD(-)"                       
Queue " 01 TYPE(DATAOUT) INTENS(LOW)"                                           
Queue " 02 TYPE(DATAOUT) INTENS(HIGH)"                                          
Queue " 0B TYPE(DATAOUT) INTENS(HIGH) FORMAT(DBCS)"                             
Queue " 0C TYPE(DATAOUT) INTENS(HIGH) FORMAT(EBCDIC)"                           
Queue " 0D TYPE(DATAOUT) INTENS(HIGH) FORMAT(&MIXED)"                           
Queue " 10 TYPE(DATAOUT) INTENS(LOW)  FORMAT(DBCS)"                             
Queue " 11 TYPE(DATAOUT) INTENS(LOW)  FORMAT(EBCDIC)"                           
Queue " 12 TYPE(DATAOUT) INTENS(LOW)  FORMAT(&MIXED)"                           
Queue ")BODY EXPAND(//)"                                                        
Queue "%BROWSE  @&ZTITLE  / /  %Line!ZLINES  %Col!ZCOLUMS+"                     
Queue "%Command ===>_ZCMD / /           %Scroll ===>_Z   +"                     
Queue "|ZDATA ---------------/ /-------------------------|"                     
Queue "|                     / /                         |"                     
Queue "| --------------------/-/-------------------------|"                     
Queue ")INIT"                                                                   
Queue "  .HELP = LPROGH"                                                        
Queue "  .ZVARS = 'ZSCBR'"                                                      
Queue "  &ZTITLE = 'Mark''s MVS Utilities - LPROG'"                             
Queue "  &MIXED = MIX"                                                          
Queue "  IF (&ZPDMIX = N)"                                                      
Queue "   &MIXED = EBCDIC"                                                      
Queue "  VGET (ZSCBR) PROFILE"                                                  
Queue "  IF (&ZSCBR = ' ')"                                                     
Queue "   &ZSCBR = 'CSR'"                                                       
Queue ")REINIT"                                                                 
Queue "  REFRESH(ZCMD,ZSCBR,ZDATA,ZLINES,ZCOLUMS)"                              
Queue ")PROC"                                                                   
Queue "  &ZCURSOR = .CURSOR"                                                    
Queue "  &ZCSROFF = .CSRPOS"                                                    
Queue "  &ZLVLINE = LVLINE(ZDATA)"                                              
Queue "  VPUT (ZSCBR) PROFILE"                                                  
Queue ")END"                                                                    
Queue ""                                                                        
/*                                    */                                        
Address ISPEXEC "LMINIT DATAID(PAN) DDNAME("ddnm2")"                            
Address ISPEXEC "LMOPEN DATAID("pan") OPTION(OUTPUT)"                           
Do queued()                                                                     
   Parse pull panline                                                           
   Address ISPEXEC "LMPUT DATAID("pan") MODE(INVAR)" ,                          
           "DATALOC(PANLINE) DATALEN(80)"                                       
End                                                                             
Address ISPEXEC "LMMADD DATAID("pan") MEMBER(LPROGP)"                           
/* Address ISPEXEC "LMFREE DATAID("pan")" */                                    
"Delstack"                                                                      
"Newstack"                                                                      
/*************************/                                                     
/* LPROGH Panel source   */                                                     
/*************************/                                                     
If Substr(ZENVIR,6,1) >= 4 then                                                 
  Queue ")PANEL KEYLIST(ISRSPBC,ISR)"                                           
Queue ")ATTR DEFAULT(!+_)"                                                      
Queue "  _ TYPE(INPUT)   INTENS(HIGH) COLOR(TURQ) CAPS(OFF)" ,                  
      "FORMAT(&MIXED)"                                                          
Queue "  + TYPE(TEXT)    INTENS(LOW)  COLOR(BLUE)"                              
Queue "  @ TYPE(TEXT)    INTENS(LOW)  COLOR(TURQ)"                              
Queue "  ! TYPE(TEXT)    INTENS(HIGH) COLOR(GREEN)"                             
Queue ")BODY EXPAND(//)"                                                        
Queue "!HELP    @&ZTITLE  / / "                                                 
Queue "!Command ===>_ZCMD / / "                                                 
Queue "+                                                              "         
Queue "+EXECUTION SYNTAX:                                             "         
Queue "+                                                              "         
Queue "!TSO %LPROG <option>                                           "         
Queue "+                                                              "         
Queue "+VALID OPTIONS ARE 'ALL' (default), 'LNK'",                              
      "or 'LINK', 'APF', & 'LPA' "                                              
Queue "+                                                              "         
Queue "+Examples:                                                     "         
Queue "! TSO %LPROG       (display LPA list, LNKLST, and APF list)    "         
Queue "! TSO %LPROG LPA   (display LPA list)                          "         
Queue "! TSO %LPROG LNK   (display LNKLST)                            "         
Queue "! TSO %LPROG LINK  (display LNKLST)                            "         
Queue "! TSO %LPROG APF   (display APF list)                          "         
Queue "+                                                              "         
Queue "+                                                              "         
Queue "+                                                              "         
Queue "@&ADLINE"                                                                
Queue ")INIT"                                                                   
Queue "  .HELP = ISR10000"                                                      
Queue "  &ZTITLE = 'Mark''s MVS Utilities - LPROG'"                             
Queue " &ADLINE = 'Mark''s MVS Utilities -",                                    
      "http://home.flash.net/~mzelden/mvsutil.html'"                            
Queue "  &MIXED = MIX"                                                          
Queue "  IF (&ZPDMIX = N)"                                                      
Queue "   &MIXED = EBCDIC"                                                      
Queue ")END"                                                                    
Queue ""                                                                        
/*                                    */                                        
Do queued()                                                                     
   Parse pull panline                                                           
   Address ISPEXEC "LMPUT DATAID("pan") MODE(INVAR)" ,                          
           "DATALOC(PANLINE) DATALEN(80)"                                       
End                                                                             
Address ISPEXEC "LMMADD DATAID("pan") MEMBER(LPROGH)"                           
Address ISPEXEC "LMFREE DATAID("pan")"                                          
"Delstack"                                                                      
"EXECIO * DISKW" ddnm1 "(FINIS"                                                 
zerrsm  = 'LPROG' OPTION                                                        
zerrlm  = 'LPROG -' OPTION ||' option. Last updated on' ,                       
           LASTUPD ||'. Written by' ,                                           
          'Mark Zelden. Mark''s MVS Utilities -' ,                              
          'http://home.flash.net/~mzelden/mvsutil.html'                         
zerralrm = 'NO'      /* msg - no alarm */                                       
zerrhm   = 'LPROGH'  /* help panel */                                           
address ISPEXEC "LIBDEF ISPPLIB LIBRARY ID("||ddnm2||") STACK"                  
address ISPEXEC "SETMSG MSG(ISRZ002)"                                           
address ISPEXEC "LMINIT DATAID(TEMP) DDNAME("||ddnm1||")"                       
address ISPEXEC "BROWSE DATAID("||temp") PANEL(LPROGP)"                         
address ISPEXEC "LMFREE DATAID("||temp")"                                       
address ISPEXEC "LIBDEF ISPPLIB"                                                
junk = msg('off')                                                               
"FREE FI("||ddnm1||")"                                                          
"FREE FI("||ddnm2||")"                                                          
Return                                                                          
