/* REXX */                                                                      
/* AUTHOR: Mark Zelden                   */                                     
/*********************************************************************/         
/* This exec will show the MEMLIMIT and 64-bit storage allocation    */         
/* for all tasks running in the system.  The allocation numbers      */         
/* come from the RSM Address Space Block Extension (RAX).            */         
/* For z/OS 1.5 and above, shared memory allocations are included.   */         
/*                                                                   */         
/* See MVS Data Areas manual and SYS1.MODGEN(IARRAX)                 */         
/*********************************************************************/         
/* SEE OA14391 for an explanation of MEMSRC.10 (IEFUSI + REGION=0)   */         
/* After this APAR you won't see REG=0 as a reason if IEFUSI         */         
/* changes your REGION without touching MEMLIMIT.                    */         
/*********************************************************************/         
/* TSO execution syntax: TSO %RXSTOR64                               */         
/*                       TSO %RXSTOR64 ALL                           */         
/*                                                                   */         
/* By default, only tasks that have memory objects allocated will    */         
/* be displayed unless the "ALL" option is used.                     */         
/*********************************************************************/         
Arg OPT                                                                         
/***********************************************************/                   
LASTUPD = '10/09/2007'     /* date of last update          */                   
/***********************************************************/                   
Numeric digits 14                           /* dflt of 9 not enough  */         
CVT      = C2d(Storage(10,4))               /* point to CVT          */         
CVTOSLV3 = Storage(D2x(CVT+1267),1)         /* byte 3 of CVTOSLVL    */         
FLCARCH  = Storage('A3',1)                  /* FLCARCH in PSA        */         
If bitand(CVTOSLV3,'10'x) <> '10'x | ,      /* z/OS 1.2 or above ?   */         
   C2d(FLCARCH) = 0 then do                 /* 0 means not z/Arch.   */         
  Say 'System must be at least z/OS 1.2 and running in'                         
  Say 'z/Architecture mode to use this exec.'                                   
  Exit 12                                                                       
End                                                                             
If bitand(CVTOSLV3,'02'x) = '02'x then ,    /* z/OS 1.5 and above?   */         
   HVSHARE = 1                              /* set HVSHARE avail flag*/         
  Else HVSHARE = 0                          /* below z/OS 1.5        */         
/* HVSHARE = 0 */   /* force 0 (below z/OS 1.5) for testing */                  
CVTASVT  = C2d(Storage(D2x(CVT+556),4))     /* point to ASVT         */         
ASVTMAXU = C2d(Storage(D2x(CVTASVT+516),4)) /* max number of entries */         
                                                                                
If HVSHARE = 1 then do                         /* z/OS 1.5 & above  */          
   /* Memlimit Source Table */                                                  
  MEMSRC.0  = '       '                                                         
  MEMSRC.1  = '  SMF  '                                                         
  MEMSRC.2  = '  JCL  '                                                         
  MEMSRC.3  = ' REG=0 '                                                         
  MEMSRC.4  = ' IEFUSI'                                                         
  MEMSRC.5  = 'OMVSSEG'                                                         
  MEMSRC.6  = 'SETRLIM'                                                         
  MEMSRC.7  = ' SPAWN '                                                         
  MEMSRC.8  = 'SETOMVS'                                                         
  MEMSRC.9  = 'AUTHPGM'                                                         
  MEMSRC.10 = 'USIREG0'                                                         
  Queue '             6 4 - B I T     S T O R A G E  ' ,                        
        '  A L L O C A T I O N'                                                 
  Queue '  '                                                                    
  Queue '  TASK     MEMORY   MEMLIM   NUM    ALLOC' ,                           
      ' HIDDEN    HWM   SHARE   SHARE   SHARE'                                  
  Queue '  NAME     LIMIT    SOURCE   OBJ     MEM ' ,                           
      '   MEM     MEM   # OBJ   ALLOC    HWM '                                  
  Queue '--------  -------  -------  -----  ------' ,                           
      ' ------  ------  -----  ------  ------'                                  
End /* if HVSHARE = 1 */                        /* z/OS 1.5 & above  */         
Else Do                                         /* below z/os 1.5    */         
   /* Memlimit Source Table */                                                  
  MEMSRC.0  = '              '                                                  
  MEMSRC.1  = '     SMF      '                                                  
  MEMSRC.2  = '     JCL      '                                                  
  MEMSRC.3  = '   REGION=0   '                                                  
  MEMSRC.4  = '    IEFUSI    '                                                  
  MEMSRC.5  = ' OMVS SEGMENT '                                                  
  MEMSRC.6  = 'UNIX SETRLIMIT'                                                  
  MEMSRC.7  = '  UNIX SPAWN  '                                                  
  MEMSRC.8  = ' SETOMVS CMD  '                                                  
  MEMSRC.9  = ' AUTH PROGRAM '                                                  
  MEMSRC.10 = 'IEFUSI + REG=0'                                                  
  Queue '        6 4 - B I T     S T O R A G E     A L L O C A T I O N'         
  Queue '  '                                                                    
  Queue '  TASK      MEMORY      MEMLIMIT       NUM     ALLOC' ,                
      '  HIDDEN     HWM '                                                       
  Queue '  NAME      LIMIT        SOURCE        OBJ      MEM ' ,                
      '    MEM      MEM '                                                       
  Queue '--------   -------   --------------   -----   ------' ,                
      '  ------   ------'                                                       
End /* else do */                                                               
                                                                                
NUMOBJ = 0      /* total number of tasks with private memory objects */         
NUMSHR = 0      /* total number of tasks with shared memory objects  */         
Do I = 0 to ASVTMAXU-1 /* start at 0 so I*4 bumps to next entry      */         
  ASVTENTY = Storage(D2x(CVTASVT+528+(I*4)),4)  /* cur ASVT entry    */         
  ASVT_USED = Storage(D2x(CVTASVT+528+(I*4)),1) /* in use byte       */         
  If Bitand(ASVT_USED,'80'x) == '80'x then iterate  /* avail, skip   */         
  ASCB     = C2d(ASVTENTY)     /* change to decimal for code below   */         
  ASCBRSME = C2d(Storage(D2X(ASCB+364),4))      /* point to RAX      */         
  RAX      = ASCBRSME                           /* more readable     */         
  If RAX   = 0 then iterate                /* Skip broken / NF asid? */         
  ASCBJBN  = C2d(Storage(D2x(ASCB+172),4))      /* ASCBJBNI          */         
  If ASCBJBN  = 0 then ,    /* not a job - must be START/LOGON/MOUNT */         
     ASCBJBN  = C2d(Storage(D2x(ASCB+176),4))   /* ASCBJBNS          */         
                                                                                
  TASKNAME    = Storage(D2x(ASCBJBN),8)         /* task name         */         
                                                                                
  RAXLVNMOMB = C2d(Storage(D2x(RAX + 188),4))   /* number of objects */         
  /* RAXLVNMOMB = 0 */   /* force 0 for testing */                              
  If RAXLVNMOMB <> 0 then ,                                                     
     NUMOBJ = NUMOBJ+1                      /* # tasks with objects  */         
  If HVSHARE = 1 then do                    /* z/OS 1.5 & above      */         
    RAXLVSHRNMOMB = C2d(Storage(D2x(RAX + 216),8)) /* # shr objects  */         
  /* RAXLVSHRNMOMB = 1 */  /* force 1 for testing */                            
    If RAXLVSHRNMOMB <> 0 then ,                                                
       NUMSHR = NUMSHR+1                    /* # tasks with shr objs */         
  End /* if HVSHARE = 1 */                                                      
  Else RAXLVSHRNMOMB = 0  /* never any shared objects below z/OS 1.5 */         
                                                                                
  If OPT <> 'ALL' & (RAXLVNMOMB=0 & RAXLVSHRNMOMB=0) then iterate               
                                                                                
  RAXLVMEMLIM = C2d(Storage(D2x(RAX+152),8))    /* MEMLIMIT in MB    */         
  RAXLVMEMLIM = FORMAT_MEMSIZE(RAXLVMEMLIM)     /* format size       */         
                                                                                
  RAXLVMEMLIMS = C2d(Storage(D2x(RAX + 184),1)) /* MEMLIMIT source   */         
                                                                                
  RAXLVABYTES = C2d(Storage(D2x(RAX + 160),8))  /* bytes allocated   */         
  RAXLVABYTES = RAXLVABYTES/1024/1024           /* change to MB      */         
  RAXLVABYTES = FORMAT_MEMSIZE(RAXLVABYTES)     /* format size       */         
                                                                                
  RAXLVHBYTES = C2d(Storage(D2x(RAX + 168),8))  /* bytes hidden      */         
  RAXLVHBYTES = RAXLVHBYTES/1024/1024           /* change to MB      */         
  RAXLVHBYTES = FORMAT_MEMSIZE(RAXLVHBYTES)     /* format size       */         
                                                                                
  RAXLVGBYTES = C2d(Storage(D2x(RAX + 176),8))  /* high water mark   */         
  RAXLVGBYTES = RAXLVGBYTES/1024/1024           /* change to MB      */         
  RAXLVGBYTES = FORMAT_MEMSIZE(RAXLVGBYTES)     /* format size       */         
                                                                                
  If HVSHARE = 1 then do                        /* z/OS 1.5 & above  */         
    RAXLVSHRBYTES = C2d(Storage(D2x(RAX + 200),8)) /* shr bytes alloc*/         
    RAXLVSHRBYTES = RAXLVSHRBYTES/1024/1024        /* change to MB   */         
    RAXLVSHRBYTES = FORMAT_MEMSIZE(RAXLVSHRBYTES)  /* format size    */         
                                                                                
    RAXLVSHRGBYTES = C2d(Storage(D2x(RAX + 208),8)) /* shr bytes HWM */         
    RAXLVSHRGBYTES = RAXLVSHRGBYTES/1024/1024       /* change to MB  */         
    RAXLVSHRGBYTES = FORMAT_MEMSIZE(RAXLVSHRGBYTES) /* format size   */         
  End /* if HVSHARE = 1 */                                                      
                                                                                
  If HVSHARE = 1 then do                        /* z/OS 1.5 & above  */         
  Queue TASKNAME ' 'Right(RAXLVMEMLIM,7) ,                                      
           ' 'MEMSRC.RAXLVMEMLIMS ,                                             
           ' 'Right(RAXLVNMOMB,5)      Right(RAXLVABYTES,7) ,                   
              Right(RAXLVHBYTES,7)     Right(RAXLVGBYTES,7) ,                   
           ' 'Right(RAXLVSHRNMOMB,5)   Right(RAXLVSHRBYTES,7) ,                 
              Right(RAXLVSHRGBYTES,7)                                           
  End /* if HVSHARE = 1 */                                                      
  Else Do                                       /* below z/os 1.5    */         
  Queue TASKNAME '  'Right(RAXLVMEMLIM,7) ,                                     
           '  'MEMSRC.RAXLVMEMLIMS ,                                            
          '  'Right(RAXLVNMOMB,5)   ' 'Right(RAXLVABYTES,7) ,                   
           ' 'Right(RAXLVHBYTES,7)  ' 'Right(RAXLVGBYTES,7)                     
  End /* else do */                                                             
                                                                                
End  /* Do I = 0 to ASVTMAXU-1 */                                               
                                                                                
If (NUMOBJ = 0 & NUMSHR = 0) & OPT <> 'ALL' then do                             
  Queue ' '                                                                     
  Queue '** No tasks have memory objects allocated **'                          
  Queue '**    Use the "ALL" option for details    **'                          
  Queue ' '                                                                     
End                                                                             
                                                                                
/*****************************************************************/             
/* Done processing. If ISPF is active, browse output.  Otherwise */             
/* write to the terminal via "SAY".                              */             
/*****************************************************************/             
Queue ''  /* null queue to end stack   */                                       
If Sysvar('SYSISPF')='ACTIVE' then call BROWSE_ISPF                             
Else do queued()                                                                
 Parse pull line                                                                
 Say line                                                                       
End                                                                             
Exit 0                                                                          
                                                                                
FORMAT_MEMSIZE:                                                                 
/****************************************************************/              
/* The following code is used to display the storage size in    */              
/* the largest possible unit.  For example, 1023G and 1025G are */              
/* displayed as 1023G and 1025G, but 1024G is displayed as 1T.  */              
/* The size passed to the routine must be in MB.                */              
/****************************************************************/              
Arg SIZE_IN_MB                                                                  
Select                                                                          
   When SIZE_IN_MB < 1024 then do                                               
     MUNITS = 'M'                                                               
   End                                                                          
   When SIZE_IN_MB >= 1024 & SIZE_IN_MB < 1048576 then do                       
     If SIZE_IN_MB/1024 == TRUNC(SIZE_IN_MB/1024) then do                       
       SIZE_IN_MB = SIZE_IN_MB/1024                                             
       MUNITS = 'G'                                                             
     End                                                                        
     Else MUNITS = 'M'                                                          
   End                                                                          
   When SIZE_IN_MB >= 1048576 & SIZE_IN_MB < 1073741824 then do                 
     If SIZE_IN_MB/1048576 == TRUNC(SIZE_IN_MB/1048576) then do                 
       SIZE_IN_MB = SIZE_IN_MB/1048576                                          
       MUNITS = 'T'                                                             
     End                                                                        
     Else do                                                                    
       SIZE_IN_MB = SIZE_IN_MB/1024                                             
       MUNITS = 'G'                                                             
     End                                                                        
   End                                                                          
   When SIZE_IN_MB >= 1073741824 & ,                                            
        SIZE_IN_MB <= 17591112302592 then do                                    
     If SIZE_IN_MB/1073741824 == TRUNC(SIZE_IN_MB/1073741824) ,                 
        then do                                                                 
       SIZE_IN_MB = SIZE_IN_MB/1073741824                                       
       MUNITS = 'P'                                                             
     End                                                                        
     Else do                                                                    
       SIZE_IN_MB = SIZE_IN_MB/1048576                                          
       MUNITS = 'T'                                                             
     End                                                                        
   End                                                                          
   When SIZE_IN_MB = 17592186040320 then do                                     
       SIZE_IN_MB = 'NOLIMIT'   /* 16384P */                                    
       MUNITS = ''                                                              
   End                                                                          
   Otherwise Queue 'Error in MEMLIMIT SIZE code. Contact Mark Zelden.'          
End /* select */                                                                
STOR_SIZE =  SIZE_IN_MB || MUNITS                                               
Return STOR_SIZE                                                                
                                                                                
BROWSE_ISPF: /* Browse output if ISPF is active          */                     
/*********************************************************************/         
/* Browse results                                                    */         
/*********************************************************************/         
Queue ''  /* null queue to end stack   */                                       
Address ISPEXEC "CONTROL ERRORS RETURN"                                         
Address ISPEXEC "VGET ZENVIR"                                                   
Address TSO                                                                     
prefix = sysvar('SYSPREF')        /* tso profile prefix            */           
uid    = sysvar('SYSUID')         /* tso userid                    */           
If prefix = '' then prefix = uid  /* use uid if null prefix        */           
If prefix <> '' & prefix <> uid then /* different prefix than uid  */           
   prefix = prefix || '.' || uid /* use  prefix.uid                */           
ddnm1 = 'DDO'||random(1,99999)   /* choose random ddname           */           
ddnm2 = 'DDP'||random(1,99999)   /* choose random ddname           */           
junk = msg('off')                                                               
"ALLOC FILE("||ddnm1||") UNIT(SYSALLDA) NEW TRACKS SPACE(2,1) DELETE",          
      " REUSE LRECL(80) RECFM(F B) BLKSIZE(3120)"                               
"ALLOC FILE("||ddnm2||") UNIT(SYSALLDA) NEW TRACKS SPACE(1,1) DELETE",          
      " REUSE LRECL(80) RECFM(F B) BLKSIZE(3120) DIR(1)"                        
junk = msg('on')                                                                
"Newstack"                                                                      
/*************************/                                                     
/* REXX64P Panel source */                                                      
/*************************/                                                     
If Substr(ZENVIR,6,1) >= 4 then                                                 
  Queue ")PANEL KEYLIST(ISRSPBC,ISR)"                                           
Queue ")ATTR"                                                                   
Queue "  _ TYPE(INPUT)   INTENS(HIGH) COLOR(TURQ) CAPS(OFF)" ,                  
      "FORMAT(&MIXED)"                                                          
Queue "  | AREA(DYNAMIC) EXTEND(ON)   SCROLL(ON)"                               
Queue "  + TYPE(TEXT)    INTENS(LOW)  COLOR(BLUE)"                              
Queue "  @ TYPE(TEXT)    INTENS(LOW)  COLOR(TURQ)"                              
Queue "  % TYPE(TEXT)    INTENS(HIGH) COLOR(GREEN)"                             
Queue "  ! TYPE(OUTPUT)  INTENS(HIGH) COLOR(TURQ) PAD(-)"                       
Queue " 01 TYPE(DATAOUT) INTENS(LOW)"                                           
Queue " 02 TYPE(DATAOUT) INTENS(HIGH)"                                          
Queue " 0B TYPE(DATAOUT) INTENS(HIGH) FORMAT(DBCS)"                             
Queue " 0C TYPE(DATAOUT) INTENS(HIGH) FORMAT(EBCDIC)"                           
Queue " 0D TYPE(DATAOUT) INTENS(HIGH) FORMAT(&MIXED)"                           
Queue " 10 TYPE(DATAOUT) INTENS(LOW)  FORMAT(DBCS)"                             
Queue " 11 TYPE(DATAOUT) INTENS(LOW)  FORMAT(EBCDIC)"                           
Queue " 12 TYPE(DATAOUT) INTENS(LOW)  FORMAT(&MIXED)"                           
Queue ")BODY EXPAND(//)"                                                        
Queue "%BROWSE  @&ZTITLE  / /  %Line!ZLINES  %Col!ZCOLUMS+"                     
Queue "%Command ===>_ZCMD / /           %Scroll ===>_Z   +"                     
Queue "|ZDATA ---------------/ /-------------------------|"                     
Queue "|                     / /                         |"                     
Queue "| --------------------/-/-------------------------|"                     
Queue ")INIT"                                                                   
Queue "  .HELP = ISR10000"                                                      
Queue "  .ZVARS = 'ZSCBR'"                                                      
Queue "  &ZTITLE = 'Mark''s MVS Utilities - RXSTOR64'"                          
Queue "  &MIXED = MIX"                                                          
Queue "  IF (&ZPDMIX = N)"                                                      
Queue "   &MIXED = EBCDIC"                                                      
Queue "  VGET (ZSCBR) PROFILE"                                                  
Queue "  IF (&ZSCBR = ' ')"                                                     
Queue "   &ZSCBR = 'CSR'"                                                       
Queue ")REINIT"                                                                 
Queue "  REFRESH(ZCMD,ZSCBR,ZDATA,ZLINES,ZCOLUMS)"                              
Queue ")PROC"                                                                   
Queue "  &ZCURSOR = .CURSOR"                                                    
Queue "  &ZCSROFF = .CSRPOS"                                                    
Queue "  &ZLVLINE = LVLINE(ZDATA)"                                              
Queue "  VPUT (ZSCBR) PROFILE"                                                  
Queue ")END"                                                                    
Queue ""                                                                        
/*                                    */                                        
Address ISPEXEC "LMINIT DATAID(PAN) DDNAME("ddnm2")"                            
Address ISPEXEC "LMOPEN DATAID("pan") OPTION(OUTPUT)"                           
Do queued()                                                                     
   Parse pull panline                                                           
   Address ISPEXEC "LMPUT DATAID("pan") MODE(INVAR)" ,                          
           "DATALOC(PANLINE) DATALEN(80)"                                       
End                                                                             
Address ISPEXEC "LMMADD DATAID("pan") MEMBER(REXX64P)"                          
Address ISPEXEC "LMFREE DATAID("pan")"                                          
"Delstack"                                                                      
"EXECIO * DISKW" ddnm1 "(FINIS"                                                 
If NUMOBJ = 0 & NUMSHR = 0 then zedsmsg = 'No memory objects'                   
                else zedsmsg = 'Tasks found with objects'                       
If HVSHARE = 1 then do  /* z/OS 1.5 and above */                                
  zedlmsg = NUMOBJ 'tasks with private and' NUMSHR 'tasks' ,                    
            'with shared memory objects found.' ,                               
            'RXSTOR64 - Last updated on' ,                                      
             LASTUPD ||'. Written by' ,                                         
            'Mark Zelden. Mark''s MVS Utilities -' ,                            
            'http://home.flash.net/~mzelden/mvsutil.html'                       
End                                                                             
Else do                                                                         
  zedlmsg = NUMOBJ 'tasks with memory objects found.' ,                         
            'RXSTOR64 - Last updated on' ,                                      
             LASTUPD ||'. Written by' ,                                         
            'Mark Zelden. Mark''s MVS Utilities -' ,                            
            'http://home.flash.net/~mzelden/mvsutil.html'                       
End                                                                             
Address ISPEXEC "LIBDEF ISPPLIB LIBRARY ID("ddnm2") STACK"                      
If OPT <> 'ALL' & (NUMOBJ = 0 & NUMSHR = 0) then ,                              
  Address ISPEXEC "SETMSG MSG(ISRZ001)"  /* msg - with alarm  */                
Else ,                                                                          
  Address ISPEXEC "SETMSG MSG(ISRZ000)"  /* msg - no alarm    */                
Address ISPEXEC "LMINIT DATAID(TEMP) DDNAME("ddnm1")"                           
Address ISPEXEC "BROWSE DATAID("temp") PANEL(REXX64P)"                          
Address ISPEXEC "LMFREE DATAID("temp")"                                         
Address ISPEXEC "LIBDEF ISPPLIB"                                                
junk = msg('off')                                                               
"FREE FI("ddnm1")"                                                              
"FREE FI("ddnm2")"                                                              
Return                                                                          
