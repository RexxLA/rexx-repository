/****************************************************************************************************************

 ┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  
 │ This file is part of The Unicode Tools Of Rexx (TUTOR).                                                       │
 │ See https://github.com/RexxLA/rexx-repository/tree/master/ARB/standards/work-in-progress/unicode/UnicodeTools │
 │ Copyright © 2023 Josep Maria Blasco <josep.maria.blasco@epbcn.com>.                                           │
 │ License: Apache License 2.0 (https://www.apache.org/licenses/LICENSE-2.0).                                    │
 └───────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
 
 *****************************************************************************************************************/

--------------------------------------------------------------------------------
-- This program is part of the automated test suite. See tests/test.all.rex   --
--------------------------------------------------------------------------------

-- This program tests the extended features of the LINES BIF

Arg auto .

auto = auto == "AUTO" 
 
tmpfile = SysTempFileName("????.file")

If tmpFile == "" Then Do
  Say "Cannot create temporary file."
  Exit 1
End

Say "Testing the LINES BIF"
Say "---------------------"
Say
Say "When the program appears to stop, please press ENTER to continue"
Say
if \auto Then Parse pull
Say "Testing the functionality of the BIF when no ENCODING has been specified"

Call LineOut tmpFile,"One line"
Call LineOut tmpFile,"Two lines"
Call LineOut tmpFile,"Three lines"
Call LineOut tmpFile               -- Close the file

lines = lines(tmpFile)
If lines \== 1 Then Do
  Say "LINES returned" lines", expected 1."
  Call Exit 1
End
lines = lines(tmpFile,"Count")
If lines \== 3 Then Do
  Say "LINES returned" lines", expected 3."
  Call Exit 1
End
Say "PASSED!"
Say
if \auto Then Parse pull
Say "Now testing the functionality of the BIF with a fixed-length ENCODING with a standard end-of-file character"

Call Stream tmpFile,"Command", "Close"
Call Stream tmpFile,"Command", "Open Read Encoding CP-850"
lines = lines(tmpFile)
If lines \== 1 Then Do
  Say "LINES returned" lines", expected 1."
  Call Exit 1
End
lines = lines(tmpFile,"Count")
If lines \== 3 Then Do
  Say "LINES returned" lines", expected 3."
  Call Exit 1
End
Say "PASSED!"
Say
if \auto Then Parse pull
Say "Now testing the functionality of the BIF with a fixed-length ENCODING with a non-standard end-of-file character"

Call Stream tmpFile,"Command", "Close"
Call Stream tmpFile,"Command", "Open Read Encoding IBM-1047"
lines = lines(tmpFile)
If lines \== 1 Then Do
  Say "LINES returned" lines", expected 1."
  Call Exit 1
End
Signal On Syntax Name IBM1047
lines = lines(tmpFile,"Count")
Say "FAILED! Syntax error expected."
Call Exit 1
IBM1047:
Say "PASSED!"
Say
if \auto Then Parse pull
Say "Now testing the functionality of the BIF with a variable-length ENCODING"

Call Stream tmpFile,"Command", "Close"
Call Stream tmpFile,"Command", "Open Read Encoding UTF-8"
lines = lines(tmpFile)
If lines \== 1 Then Do
  Say "LINES returned" lines", expected 1."
  Call Exit 1
End
Signal On Syntax Name UTF8
lines = lines(tmpFile,"Count")
Say "FAILED! Syntax error expected."
Call Exit 1
UTF8:
Say "PASSED!"
Say

Call Exit 0  
   
Exit:
  Call Stream tmpfile,"C","CLOSE"
  Call SysFileDelete tmpfile
  Exit Arg(1)

4: Return Right(Arg(1),4,"00"x)

Test: Procedure Expose line. tmpfile
  Use Strict Arg read, n, label
  If read \== line.n Then Do
    Say "Test failed: line no." n,,
      "should be '"ChangeStr("0D"X,line.n,"_")"' ('"c2x(line.n)"'X),",,
      "found     '"ChangeStr("0D"X,read  ,"_")"' ('"c2x(read)"'X)."
    Call Exit 1
  End
  Say label": PASSED."
Return


CreateFile: Procedure Expose tmpFile
  Call Stream tmpFile,"C","Open Write Replace"
  Use Strict Arg lines, eol
  Do counter c line Over lines
    Call CharOut tmpFile, line
    -- No line-end after last line    
    If c < lines~items Then Call CharOut tmpFile, eol
  End
  Call Stream tmpFile,"C","CLOSE"
Return  
  
  