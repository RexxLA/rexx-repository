/****************************************************************************************************************

 ┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  
 │ This file is part of The Unicode Tools Of Rexx (TUTOR).                                                       │
 │ See https://github.com/RexxLA/rexx-repository/tree/master/ARB/standards/work-in-progress/unicode/UnicodeTools │
 │ Copyright © 2023 Josep Maria Blasco <josep.maria.blasco@epbcn.com>.                                           │
 │ License: Apache License 2.0 (https://www.apache.org/licenses/LICENSE-2.0).                                    │
 └───────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
 
 *****************************************************************************************************************/

--------------------------------------------------------------------------------
-- This program is part of the automated test suite. See tests/test.all.rex   --
--------------------------------------------------------------------------------  
 
-- lineout.rxu - Test the extended features of the LINEOUT BIF.
 
Arg auto 
auto = auto == "AUTO"
 
tmpfile = SysTempFileName("????.file")

If tmpFile == "" Then Do
  Say "Cannot create temporary file."
  Exit 1
End

Say "Testing the LINEOUT BIF"
Say "----------------------"
Say
/*
Say "When the program appears to stop, please press ENTER to continue"
Say
If \auto Then Parse pull
*/
Call Stream tmpFile,"C", "Open Write Encoding UTF-16"

Call LineOut tmpFile, "Abá"Y "(Man)"U "FF"X
Call Stream  tmpFile, "C", "Close"

Call Stream  tmpFile,"C", "Open Read"
line = LineIn(tmpFile)"0A"X
expected = "0041006200E10020D83DDC680020FFFD000D000A"X
If line \== expected Then Do
  Say "FAILED!"
  Say
  Say "Expected: '"expected~c2x"'."
  Say "Found:    '"line~c2x"'."
  Call Exit 1
End
Say "...A...b...á... --(Man)-... REPL..CR..LF"
Say line~c2x

Call Exit 0

Exit:
  Call Stream tmpfile,"C","CLOSE"
  Call SysFileDelete tmpfile
  Exit Arg(1)

4: Return Right(Arg(1),4,"00"x)

Test: Procedure Expose line. tmpfile
  Use Strict Arg read, n, label
  If read \== line.n Then Do
    Say "Test failed: line no." n,,
      "should be '"line.n"' ('"c2x(line.n)"'X),",,
      "found     '"read"' ('"c2x(read)"'X)."
    Call Exit 1
  End
  Say label": PASSED."
Return

CreateFile: Procedure Expose tmpFile
  Call Stream tmpFile,"C","Open Write Replace"
  Use Strict Arg lines, eol
  Do counter c line Over lines
    Call CharOut tmpFile, line
    -- No line-end after last line    
    If c < lines~items Then Call CharOut tmpFile, eol
  End
  Call Stream tmpFile,"C","CLOSE"
Return  
  
  