/****************************************************************************************************************

 ┌───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  
 │ This file is part of The Unicode Tools Of Rexx (TUTOR).                                                       │
 │ See https://github.com/RexxLA/rexx-repository/tree/master/ARB/standards/work-in-progress/unicode/UnicodeTools │
 │ Copyright © 2023 Josep Maria Blasco <josep.maria.blasco@epbcn.com>.                                           │
 │ License: Apache License 2.0 (https://www.apache.org/licenses/LICENSE-2.0).                                    │
 └───────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
 
 *****************************************************************************************************************/

--------------------------------------------------------------------------------
-- This program is part of the automated test suite. See tests/test.all.rex   --
-------------------------------------------------------------------------------- 

-- upper.rxu: test some features of the UPPER BIF.


Arg auto .
auto = auto == "AUTO"

Options Conversions Promote

Say "Testing the UPPER BIF:"
Say "----------------------"

Call NextTest "Uppercasing several european characters"

Call Test "áéíóúýàèìòùäëïöïÿâêîôûñãõç"T, 'ÁÉÍÓÚÝÀÈÌÒÙÄËÏÖÏŸÂÊÎÔÛÑÃÕÇ'

Call NextTest "Characters with iota-subscript (0345)"

Say "In some cases (like the one shown below) uppercasing codepoint"
Say "sequences containing U+0345 followed by other combining marks"
Say "needs a reordering of the codepoints, lest the combining marks"
Say "get applied to the resulting Iota."
Say

str = Codepoints("(GREEK SMALL LETTER ALPHA) 0345 (COMBINING ACUTE ACCENT)"U)
Call Test str, "ΆΙ"P

Say "Original string:" C2U(str)
Say "Uppercased string:" C2U(Upper(str))

Call NextTest "Uppercasing of the german es-zed"

Call Test "Straße"P, "STRASSE"

Say
Say "Done!"

Exit 0

Test:
  Use Arg string
  Say "Upper('"string"') = '"Upper(string)"'"
  If Upper(string) \== Arg(2) Then Do
    Say "Test FAILED!"
    Say "Expected: '"Arg(2)"'."
    Exit 1
  End
Return  

NextTest:
  Parse arg title
  Say
  Say "(press ENTER to continue)"
  Say 
  If \auto Then Parse Pull
  Say title
  Say Copies("-",Length(title))
  Say 
Return  