/* Rexx */





/******************************************************************************/
/*                                                                            */
/*                        THIS FILE HAS BEEN GENERATED                        */
/*                                                                            */
/*                   DO NOT EDIT - ALL CHANGES WILL BE LOST                   */
/*                                                                            */
/******************************************************************************/


/*
Script displaying some expected results for Unicode strings.
*/



class netrexx_expected_results
properties static





ok = 0
ko = 0

/******************************************************************************/
/* strings */
/******************************************************************************/

/* BMP only (no surrogate when UTF-16), no grapheme made of several codepoints */
s1 = "caf√©"

    /*
    Codepoints
     1 : ( "c"   U+0063 Ll 1 "LATIN SMALL LETTER C" )
     2 : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
     3 : ( "f"   U+0066 Ll 1 "LATIN SMALL LETTER F" )
     4 : ( "√©"   U+00E9 Ll 1 "LATIN SMALL LETTER E WITH ACUTE" )

    Graphemes
     1 : "c"
     2 : "a"
     3 : "f"
     4 : "√©"
    */


/* Supplementary planes (surrogate pairs when UTF-16) */
s2 = "ùñºùñ∫ùñø√©"

    /*
    Codepoints
     1 : ( "ùñº"   U+1D5BC Ll 1 "MATHEMATICAL SANS-SERIF SMALL C" )
     2 : ( "ùñ∫"   U+1D5BA Ll 1 "MATHEMATICAL SANS-SERIF SMALL A" )
     3 : ( "ùñø"   U+1D5BF Ll 1 "MATHEMATICAL SANS-SERIF SMALL F" )
     4 : ( "√©"   U+00E9 Ll 1 "LATIN SMALL LETTER E WITH ACUTE" )

    Graphemes
     1 : "ùñº"
     2 : "ùñ∫"
     3 : "ùñø"
     4 : "√©"
    */


/* grapheme clusters */
s3 = "cafeÃÅ"

    /*
    Codepoints
     1 : ( "c"   U+0063 Ll 1 "LATIN SMALL LETTER C" )
     2 : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
     3 : ( "f"   U+0066 Ll 1 "LATIN SMALL LETTER F" )
     4 : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )
     5 : ( "ÃÅ"    U+0301 Mn 0 "COMBINING ACUTE ACCENT" )

    Graphemes
     1 : T'c'
     2 : T'a'
     3 : T'f'
     4 : T'eÃÅ'
    */


/* emoji */
s4 = "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"

    /*
    Codepoints
     1  : ( "n"   U+006E Ll 1 "LATIN SMALL LETTER N" )
     2  : ( "o"   U+006F Ll 1 "LATIN SMALL LETTER O" )
     3  : ( "√´"   U+00EB Ll 1 "LATIN SMALL LETTER E WITH DIAERESIS" )
     4  : ( "l"   U+006C Ll 1 "LATIN SMALL LETTER L" )
     5  : ( "üë©"  U+1F469 So 2 "WOMAN" )
     6  : ( "‚Äç"    U+200D Cf 0 "ZERO WIDTH JOINER", "ZWJ" )
     7  : ( "üë®"  U+1F468 So 2 "MAN" )
     8  : ( "‚Äç"    U+200D Cf 0 "ZERO WIDTH JOINER", "ZWJ" )
     9  : ( "üë©"  U+1F469 So 2 "WOMAN" )
     10 : ( "‚Äç"    U+200D Cf 0 "ZERO WIDTH JOINER", "ZWJ" )
     11 : ( "üëß"  U+1F467 So 2 "GIRL" )
     12 : ( "üéÖ"  U+1F385 So 2 "FATHER CHRISTMAS" )

    Notice that üë©‚Äçüë®‚Äçüë©‚Äçüëß constitute only 1 grapheme thanks to the ZERO WIDTH JOINER.
    Graphemes
     1 : "n"
     2 : "o"
     3 : "√´"
     4 : "l"
     5 : "üë©‚Äçüë®‚Äçüë©‚Äçüëß"
     6 : "üéÖ"

    */


/* mix NFC NFD, ligature, expansion factor */
s5 = "√§√∂√º aÃàoÃàuÃà xÃÇ œî Ô∑∫ baÔ¨Ñe"

    /*
    Codepoints
     1  : ( "√§"   U+00E4 Ll 1 "LATIN SMALL LETTER A WITH DIAERESIS" )
     2  : ( "√∂"   U+00F6 Ll 1 "LATIN SMALL LETTER O WITH DIAERESIS" )
     3  : ( "√º"   U+00FC Ll 1 "LATIN SMALL LETTER U WITH DIAERESIS" )
     4  : ( " "   U+0020 Zs 1 "SPACE", "SP" )
     5  : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
     6  : ( "Ãà"    U+0308 Mn 0 "COMBINING DIAERESIS" )
     7  : ( "o"   U+006F Ll 1 "LATIN SMALL LETTER O" )
     8  : ( "Ãà"    U+0308 Mn 0 "COMBINING DIAERESIS" )
     9  : ( "u"   U+0075 Ll 1 "LATIN SMALL LETTER U" )
     10 : ( "Ãà"    U+0308 Mn 0 "COMBINING DIAERESIS" )
     11 : ( " "   U+0020 Zs 1 "SPACE", "SP" )
     12 : ( "x"   U+0078 Ll 1 "LATIN SMALL LETTER X" )
     13 : ( "ÃÇ"    U+0302 Mn 0 "COMBINING CIRCUMFLEX ACCENT" )
     14 : ( " "   U+0020 Zs 1 "SPACE", "SP" )
     15 : ( "œî"   U+03D4 Lu 1 "GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL" )
     16 : ( " "   U+0020 Zs 1 "SPACE", "SP" )
     17 : ( "Ô∑∫"   U+FDFA Lo 1 "ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM" )
     18 : ( " "   U+0020 Zs 1 "SPACE", "SP" )
     19 : ( "b"   U+0062 Ll 1 "LATIN SMALL LETTER B" )
     20 : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
     21 : ( "Ô¨Ñ"   U+FB04 Ll 1 "LATIN SMALL LIGATURE FFL" )
     22 : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )

    Graphemes
     1  : T'√§'
     2  : T'√∂'
     3  : T'√º'
     4  : T' '
     5  : T'aÃà'
     6  : T'oÃà'
     7  : T'uÃà'
     8  : T' '
     9  : T'xÃÇ'
     10 : T' '
     11 : T'œî'
     12 : T' '
     13 : T'Ô∑∫'
     14 : T' '
     15 : T'b'
     16 : T'a'
     17 : T'Ô¨Ñ'
     18 : T'e'

    Some remarks about this string:
    - the first "√§√∂√º" is NFC, the second "aÃàoÃàuÃà" is NFD
    - "xÃÇ" is two codepoints in any normalization.
    - "œî" normalization forms are all different.
    - "Ô∑∫" is one of the worst cases regarding the expansion factor in NFKS/NFKS: 18x
      "baÔ¨Ñe": The ligature disappears in NFK[CD] but not in NF[CD]
    */


/* to test simple vs full case mapping */
s6 = "Bundesstra√üe im Freiland"

    /*
    Codepoints
         1  : ( "B"   U+0042 Lu 1 "LATIN CAPITAL LETTER B" )
         2  : ( "u"   U+0075 Ll 1 "LATIN SMALL LETTER U" )
         3  : ( "n"   U+006E Ll 1 "LATIN SMALL LETTER N" )
         4  : ( "d"   U+0064 Ll 1 "LATIN SMALL LETTER D" )
         5  : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )
         6  : ( "s"   U+0073 Ll 1 "LATIN SMALL LETTER S" )
         7  : ( "s"   U+0073 Ll 1 "LATIN SMALL LETTER S" )
         8  : ( "t"   U+0074 Ll 1 "LATIN SMALL LETTER T" )
         9  : ( "r"   U+0072 Ll 1 "LATIN SMALL LETTER R" )
         10 : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
         11 : ( "√ü"   U+00DF Ll 1 "LATIN SMALL LETTER SHARP S" )
         12 : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )
         13 : ( " "   U+0020 Zs 1 "SPACE", "SP" )
         14 : ( "i"   U+0069 Ll 1 "LATIN SMALL LETTER I" )
         15 : ( "m"   U+006D Ll 1 "LATIN SMALL LETTER M" )
         16 : ( " "   U+0020 Zs 1 "SPACE", "SP" )
         17 : ( "F"   U+0046 Lu 1 "LATIN CAPITAL LETTER F" )
         18 : ( "r"   U+0072 Ll 1 "LATIN SMALL LETTER R" )
         19 : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )
         20 : ( "i"   U+0069 Ll 1 "LATIN SMALL LETTER I" )
         21 : ( "l"   U+006C Ll 1 "LATIN SMALL LETTER L" )
         22 : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
         23 : ( "n"   U+006E Ll 1 "LATIN SMALL LETTER N" )
         24 : ( "d"   U+0064 Ll 1 "LATIN SMALL LETTER D" )

    Graphemes
         1  : T'B'
         2  : T'u'
         3  : T'n'
         4  : T'd'
         5  : T'e'
         6  : T's'
         7  : T's'
         8  : T't'
         9  : T'r'
         10 : T'a'
         11 : T'√ü'
         12 : T'e'
         13 : T' '
         14 : T'i'
         15 : T'm'
         16 : T' '
         17 : T'F'
         18 : T'r'
         19 : T'e'
         20 : T'i'
         21 : T'l'
         22 : T'a'
         23 : T'n'
         24 : T'd'

    Unicode standard section 5.18 Case Mappings:
        Default casing                                         Tailored casing
        (small sharp) √ü <--- ·∫û (capital sharp)                 (small sharp) √ü <--> ·∫û (capital sharp)
        (small sharp) √ü ---> SS
                     ss <--> SS                                             ss <--> SS
    When using the default Unicode casing operations, capital sharp s will lowercase
    to small sharp s, but not vice versa: small sharp s uppercases to ‚ÄúSS‚Äù.
    A tailored casing operation is needed in circumstances requiring small sharp s
    to uppercase to capital sharp s.
    */



method main(argv=String[]) public static



/* Check that the right interpreter is used */


parse version v
if pos("NetRexx", v) == 0 then do
    error = "You are not using the NetRexx interpreter"
    lineout("stdout", error)
    lineout("stdout", v)
    lineout("stderr", error)
    lineout("stderr", v)
    exit 1
end




/******************************************************************************/
/* c2x */
/******************************************************************************/

say 'c2x("'s1'")'

actual = "Error: The method 'c2x(netrexx.lang.Rexx)' cannot be found in class 'netrexx_expected_results' or a superclass"

expected = "<TBD>"
say my_compare(actual, expected)
say

say 'c2x("'s2'")'

actual = "Error: The method 'c2x(netrexx.lang.Rexx)' cannot be found in class 'netrexx_expected_results' or a superclass"

expected = "<TBD>"
say my_compare(actual, expected)
say

say 'c2x("'s3'")'

actual = "Error: The method 'c2x(netrexx.lang.Rexx)' cannot be found in class 'netrexx_expected_results' or a superclass"

expected = "<TBD>"
say my_compare(actual, expected)
say

say 'c2x("'s4'")'

actual = "Error: The method 'c2x(netrexx.lang.Rexx)' cannot be found in class 'netrexx_expected_results' or a superclass"

expected = "<TBD>"
say my_compare(actual, expected)
say

say 'c2x("'s5'")'

actual = "Error: The method 'c2x(netrexx.lang.Rexx)' cannot be found in class 'netrexx_expected_results' or a superclass"

expected = "<TBD>"
say my_compare(actual, expected)
say


/******************************************************************************/
/* c2d */
/******************************************************************************/

say 'c2d("√´")'

actual = "Error: The method 'c2d(java.lang.String)' cannot be found in class 'netrexx_expected_results' or a superclass"

expected = "<TBD>"
say my_compare(actual, expected)
say



say 'c2d("üéÖ")'

actual = "Error: The method 'c2d(java.lang.String)' cannot be found in class 'netrexx_expected_results' or a superclass"

expected = "<TBD>"
say my_compare(actual, expected)
say




/******************************************************************************/
/* center */
/******************************************************************************/

say 'center("'s4'", 10)'
actual = center(s4, 10)
expected = "  no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ  "
say my_compare(actual, expected)
say

say 'center("'s4'", 5)'
actual = center(s4, 5)
expected = "no√´lüë©‚Äçüë®‚Äçüë©‚Äçüëß"
say my_compare(actual, expected)
say

say 'center("'s4'", 3)'
actual = center(s4, 3)
expected = "o√´l"
say my_compare(actual, expected)
say


/******************************************************************************/
/* center with pad being 1 grapheme made of several bytes */
/******************************************************************************/

/*
Pad character "‚ïê"
'UTF-8 not-ASCII (3 bytes)'

Codepoints
 1 : ( "‚ïê"   U+2550 So 1 "BOX DRAWINGS DOUBLE HORIZONTAL" )

Graphemes
 1 : T'‚ïê'
*/

say 'center("'s4'", 10, "‚ïê")'

actual = center(s4, 10, "‚ïê")

expected = "‚ïê‚ïêno√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ‚ïê‚ïê"
say my_compare(actual, expected)
say


/******************************************************************************/
/* copies */
/******************************************************************************/

s = "ÃÅcafe"

    /*
     1 : ( "ÃÅ"    U+0301 Mn 0 "COMBINING ACUTE ACCENT" )
     2 : ( "c"   U+0063 Ll 1 "LATIN SMALL LETTER C" )
     3 : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
     4 : ( "f"   U+0066 Ll 1 "LATIN SMALL LETTER F" )
     5 : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )
    */

say 'copies("'s'", 4)'
actual = copies(s, 4)
expected = "ÃÅcafeÃÅcafeÃÅcafeÃÅcafe"
say my_compare(actual, expected)
say

    /*
     1  : ( "ÃÅ"    U+0301 Mn 0 "COMBINING ACUTE ACCENT" )
     2  : ( "c"   U+0063 Ll 1 "LATIN SMALL LETTER C" )
     3  : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
     4  : ( "f"   U+0066 Ll 1 "LATIN SMALL LETTER F" )
     5  : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )
     6  : ( "ÃÅ"    U+0301 Mn 0 "COMBINING ACUTE ACCENT" )
     7  : ( "c"   U+0063 Ll 1 "LATIN SMALL LETTER C" )
     8  : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
     9  : ( "f"   U+0066 Ll 1 "LATIN SMALL LETTER F" )
     10 : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )
     11 : ( "ÃÅ"    U+0301 Mn 0 "COMBINING ACUTE ACCENT" )
     12 : ( "c"   U+0063 Ll 1 "LATIN SMALL LETTER C" )
     13 : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
     14 : ( "f"   U+0066 Ll 1 "LATIN SMALL LETTER F" )
     15 : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )
     16 : ( "ÃÅ"    U+0301 Mn 0 "COMBINING ACUTE ACCENT" )
     17 : ( "c"   U+0063 Ll 1 "LATIN SMALL LETTER C" )
     18 : ( "a"   U+0061 Ll 1 "LATIN SMALL LETTER A" )
     19 : ( "f"   U+0066 Ll 1 "LATIN SMALL LETTER F" )
     20 : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )
    */


/******************************************************************************/
/* length */
/******************************************************************************/

say 'length("'s1'")'
actual = length(s1)
expected = 4
say my_compare(actual, expected)
say

say 'length("'s2'")'
actual = length(s2)
expected = 4
say my_compare(actual, expected)
say

say 'length("'s3'")'
actual = length(s3)
expected = 4
say my_compare(actual, expected)
say

say 'length("'s4'")'
actual = length(s4)
expected = 6
say my_compare(actual, expected)
say

say 'length("'s5'")'
actual = length(s5)
expected = 18
say my_compare(actual, expected)
say


/******************************************************************************/
/* pos */
/******************************************************************************/

say 'pos("√©","'s1'")'
actual = pos("√©", s1)
expected = 4
say my_compare(actual, expected)
say

say 'pos("√©","'s2'")'
actual = pos("√©",s2)
expected = 4
say my_compare(actual, expected)
say

say 'pos("√©","'s3'")'
actual = pos("√©",s3)
expected = 4               /* implies normalization when comparing */
say my_compare(actual, expected)
say


/******************************************************************************/
/* substr */
/******************************************************************************/

say 'substr("'s4'", 3, 3)'
actual = substr(s4, 3, 3)
expected = "√´lüë©‚Äçüë®‚Äçüë©‚Äçüëß"
say my_compare(actual, expected)
say

say 'substr("'s4'", 3, 6)'
actual = substr(s4, 3, 6)
expected = "√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ  "
say my_compare(actual, expected)
say


/******************************************************************************/
/* substr with pad being 1 grapheme made of several bytes */
/******************************************************************************/

/*
Pad character "‚ñ∑"
'UTF-8 not-ASCII (3 bytes)'

Codepoints
 1 : ( "‚ñ∑"   U+25B7 Sm 1 "WHITE RIGHT-POINTING TRIANGLE" )

Graphemes
 1 : T'‚ñ∑'
*/

say 'substr("'s4'", 3, 6, "‚ñ∑")'

actual = substr(s4, 3, 6, "‚ñ∑")

expected = "√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ‚ñ∑‚ñ∑"
say my_compare(actual, expected)
say


/******************************************************************************/
/* x2c */
/******************************************************************************/




/* interpreter using UCS-2 internally */
/* no BIF X2C supporting several characters (yet), so fallback to the method X2C */
say '"D83C".x2c || "DF85".x2c'
actual = "D83C".x2c || "DF85".x2c
expected = "üéÖ"
say my_compare(actual, expected)
say





say "Ok =" ok
say "Ko =" ko

return


/******************************************************************************/
/* helpers */
/******************************************************************************/

/* Can't be named "compare" because of crexx, hence the name "my_compare" */

method my_compare(actual, expected) static

    say 'actual  :' "'"actual"'"
    say 'expected:' "'"expected"'"

    if actual == expected then do

        result = "Ok"
        ok = ok + 1
    end
    else do
        result = "Ko *****"
        ko = ko + 1
    end
    return result



