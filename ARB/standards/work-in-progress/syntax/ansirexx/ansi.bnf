/*******************************************************************************/
/* 6.1.5 - BNF Syntax definition                                               */
/*******************************************************************************/

production              := identifier ':=' bnf_expression               (6.1.5.1)
bnf_expression          := abuttal | bnf_expression '|' abuttal         (6.1.5.2)
abuttal                 := [abuttal] bnf_primary                        (6.1.5.3)
bnf_primary             := '[' bnf_expression ']'                       (6.1.5.4)
                           | '(' bnf_expression ')' | literal
                           | identifier | message_identifier
                           | bnf_primary '+'


/******************************************************************************/
/* 6.2.2 - Lexical level                                                      */
/******************************************************************************/

digit                   := '0' | '1' | '2' | '3' | '4' | '5'           (6.2.2.1)
                           | '6' | '7' | '8' | '9'
special                 := ',' | ':' | ';' | ')' | '('                 (6.2.2.2)
not                     := '\' | other_negator                         (6.2.2.3)
operator_only           := '+' | '-' | '%' | '|' | '&' | '='           (6.2.2.4)
                           | not | '>' | '<'

operator_or_other       := '/' | '*'                                   (6.2.2.5)
operator_char           := operator_only | operator_or_other           (6.2.2.6)
general_letter          := '_' | '!' | '?' | extra_letter | 'A'        (6.2.2.7)
                           | 'B' | 'C' | 'D' | 'E' | 'F' | 'G'
                           | 'H' | 'I' | 'J' | 'K' | 'L' | 'M'
                           | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S'
                           | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y'
                           | 'Z' | 'a' | 'b' | 'c' | 'd' | 'e'
                           | 'f' | 'g' | 'h' | 'i' | 'j' | 'k'
                           | 'l' | 'm' | 'n' | 'o' | 'p' | 'q'
                           | 'r' | 's' | 't' | 'u' | 'v' | 'w'
                           | 'x' | 'y' | 'z'

blank                   := ' ' | other_blank_character                 (6.2.2.8)
bo                      := [blank+]                                    (6.2.2.9)
string_or_comment_char  := digit | '.' | special | operator_only      (6.2.2.10)
                           | general_letter | blank
                           | other_character

tokenize                := [between+] [tokenbetween+] EOS Eos         (6.2.2.11)
tokenbetween            := token [between+]                           (6.2.2.12)
token                   := operand | Operator | Special               (6.2.2.13)
operand                 := string_literal | Var_symbol                (6.2.2.14)
                           | Const_symbol
between                 := comment | blank_run Blank | EOL Eol        (6.2.2.15)
                           | Msg13.1
blank_run               := (blank | continuation)+                    (6.2.2.16)
continuation            := CONTINUE ',' [(comment | blank)+] EOL      (6.2.2.17)
comment                 := '/' '*' [commentpart+] ['*'+] ('*' '/'     (6.2.2.18)
                           | EOS Msg6.1)
commentpart             := comment | ['/'+] comment_char+             (6.2.2.19)
                           | '*'+ comment_char+
comment_char            := string_or_comment_char | '"' | "'"         (6.2.2.20)
                           | EOL
string_literal          := Hex_string | Binary_string | String        (6.2.2.21)
String                  := quoted_string                              (6.2.2.22)
Hex_string              := quoted_string RADIX ('x' | 'X')            (6.2.2.23)
Binary_string           := quoted_string RADIX ('b' | 'B')            (6.2.2.24)
quoted_string           := quotation_mark_string                      (6.2.2.25)
                           [(Embedded_quotation_mark
                           quotation_mark_string)+]
                           | apostrophe_string
                           [(Embedded_apostrophe
                           apostrophe_string)+]
quotation_mark_string   := '"' [(string_char | "'")+]                 (6.2.2.26)
                           ('"' | EOL Msg6.3)
apostrophe_string       := "'" [(string_char | '"')+]                 (6.2.2.27)
                           ("'" | EOL Msg6.2)
string_char             := string_or_comment_char | '*' | '/'         (6.2.2.28)
Var_symbol              := general_letter [var_symbol_char+]          (6.2.2.29)
var_symbol_char         := general_letter | digit | '.'               (6.2.2.30)
Const_symbol            := (digit | '.') [const_symbol_char+]         (6.2.2.31)
const_symbol_char       := var_symbol_char                            (6.2.2.32)
                           | EXPONENT_SIGN ('+' | '-')

Special                 := special                                    (6.2.2.33)
Operator                := operator_char | '|' bo '|'                 (6.2.2.34)
                           | '/' bo '/' | '*' bo '*' | not bo '='
                           | '>' bo '<' | '<' bo '>' | '>' bo '='
                           | not bo '<' | '<' bo '=' | not bo '>'
                           | '=' bo '=' | not bo '=' bo '='
                           | '>' bo '>' | '<' bo '<'
                           | '>' bo '>' bo '='
                           | not bo '<' bo '<'
                           | '<' bo '<' bo '='
                           | not bo '>' bo '>'
                           | '&' bo '&'

number                  := plain_number [exponent]                    (6.2.2.35)
plain_number            := ['.'] digit+ | digit+ '.' [digit+]         (6.2.2.36)
exponent                := ('e' | 'E') ['+' | '-'] digit+             (6.2.2.37)

hex_string              := (hex_digit [break_hex_digit_pair+]         (6.2.2.38)
                           | [hex_digit hex_digit
                           [break_hex_digit_pair+]]) | (Msg15.1 |
                           Msg15.3)
hex_digit               := digit | 'a' | 'A' | 'b' | 'B' | 'c'        (6.2.2.39)
                           | 'C' | 'd' | 'D' | 'e' | 'E' | 'f'
                           | 'F'
break_hex_digit_pair    := bo hex_digit hex_digit                     (6.2.2.40)

binary_string           := (binary_digit                              (6.2.2.41)
                           [break_binary_digit_quad+]
                           | binary_digit binary_digit
                           [break_binary_digit_quad+]
                           | binary_digit binary_digit
                           binary_digit
                           [break_binary_digit_quad+]
                           | [binary_digit binary_digit
                           binary_digit binary_digit
                           [break_binary_digit_quad+]])
                           | (Msg15.2 | Msg15.4)
binary_digit            := '0' | '1'                                  (6.2.2.42)
break_binary_digit_quad := bo binary_digit binary_digit               (6.2.2.43)
                           binary_digit binary_digit


/******************************************************************************/
/* 6.3.2 - Syntax level                                                       */
/******************************************************************************/

/*----------------------------------------------------------------------------*/
/* The first part introduces the overall structure of a program               */
/*----------------------------------------------------------------------------*/

program                 := [ncl] [instruction_list] ['END' Msg10.1]    (6.3.2.1)
  ncl                   := null_clause+ | Msg21.1                      (6.3.2.2)
    null_clause         := ';' [label_list]                            (6.3.2.3)
      label_list        := (LABEL ';')+                                (6.3.2.4)
    instruction_list    := instruction+                                (6.3.2.5)
      instruction       := group | single_instruction ncl              (6.3.2.6)
  single_instruction    := assignment | keyword_instruction | command  (6.3.2.7)
    assignment          := VAR_SYMBOL '=' expression                   (6.3.2.8)  
                           | NUMBER '=' Msg31.1
                           | CONST_SYMBOL '=' (Msg31.2 | Msg31.3)
    keyword_instruction := address | arg | call | drop | exit          (6.3.2.9)
                           | interpret | iterate | leave
                           | nop | numeric | options
                           | parse | procedure | pull | push
                           | queue | return | say | signal | trace
                           | 'THEN' Msg8.1 | 'ELSE' Msg8.2
                           | 'WHEN' Msg9.1 | 'OTHERWISE' Msg9.2
    command             := expression                                 (6.3.2.10)    
  group                 := do | if | select                           (6.3.2.11)    
    do                  := do_specification (ncl | Msg21.1 | Msg27.1) (6.3.2.12)    
                           [instruction_list] do_ending
      do_ending         := 'END' [VAR_SYMBOL] ncl                     (6.3.2.13)    
                           | EOS Msg14.1 | Msg35.1
  if                    := 'IF' expression [ncl] (then | Msg18.1)     (6.3.2.14)    
                           [else]
    then                := 'THEN' ncl                                 (6.3.2.15)    
                           (instruction | EOS Msg14.3 | 'END' Msg10.5)
    else                := 'ELSE' ncl                                 (6.3.2.16)    
                           (instruction | EOS Msg14.4 | 'END' Msg10.6)
  select                := 'SELECT' ncl select_body                   (6.3.2.17)    
                           ('END' [VAR_SYMBOL Msg10.4] ncl
                           | EOS Msg14.2 | Msg7.2)
    select_body         := (when | Msg7.1) [when+] [otherwise]        (6.3.2.18)    
      when              := 'WHEN' expression [ncl] (then | Msg18.2)   (6.3.2.19)    
      otherwise         := 'OTHERWISE' ncl [instruction_list]         (6.3.2.20)    


/*----------------------------------------------------------------------------*/
/* Note:  The next part concentrates on the instructions.                     */
/*        It leaves unspecified the various forms of symbol, template         */
/*          and expression.                                                   */
/*----------------------------------------------------------------------------*/

address                 := 'ADDRESS' [(taken_constant [expression]    (6.3.2.21)
                           | Msg19.1 | valueexp) [ 'WITH' connection]]
  taken_constant        := symbol | STRING                            (6.3.2.22)
  valueexp              := 'VALUE' expression                         (6.3.2.23)
  connection            := error [adio] | input [adeo]                (6.3.2.24)
                           | output [adei] | Msg25.5
    adio                := input [output] | output [input]            (6.3.2.25)
      input             := 'INPUT' (resourcei | Msg25.6)              (6.3.2.26)
        resourcei       := resources | 'NORMAL'                       (6.3.2.27)
      output            := 'OUTPUT' (resourceo | Msg25.7)             (6.3.2.28)
        resourceo       := 'APPEND' (resources | Msg25.8)             (6.3.2.29)
                           | 'REPLACE' (resources | Msg25.9)
                           | resources | 'NORMAL'
    adeo                := error [output] | output [error]            (6.3.2.30)
      error             := 'ERROR' (resourceo | Msg25.14)             (6.3.2.31)
    adei                := error [input] | input [error]              (6.3.2.32)
resources               := 'STREAM' (VAR_SYMBOL | Msg53.1)            (6.3.2.33)
                           | 'STEM' (VAR_SYMBOL | Msg53.2)
  vref                  := '(' var_symbol (')' | Msg46.1)             (6.3.2.34)
    var_symbol          := VAR_SYMBOL | Msg20.1                       (6.3.2.35)
arg                     := 'ARG' [template_list]                      (6.3.2.36)
call                    := 'CALL' (callon_spec|                       (6.3.2.37)
                           (taken_constant|Msg19.2)[expression_list])
  callon_spec           := 'ON' (callable_condition | Msg25.1)        (6.3.2.38)   
                           ['NAME' (taken_constant | Msg19.3)]
                           | 'OFF' (callable_condition | Msg25.2)
    callable_condition  := 'ERROR' | 'FAILURE'                        (6.3.2.39)
                           | 'HALT' | 'NOTREADY'
  expression_list       := expr | [expr] ',' [expression_list]        (6.3.2.40)
do_specification        := do_simple | do_repetitive                  (6.3.2.41)
  do_simple             := 'DO'                                       (6.3.2.42)
  do_repetitive         := 'DO' dorep | 'DO' docond                   (6.3.2.43)
                           | 'DO' dorep docond
                           | 'DO' 'FOREVER' [docond | Msg25.16]
  docond                := 'WHILE' whileexpr | 'UNTIL' untilexpr      (6.3.2.44)
    untilexpr           := expression                                 (6.3.2.45)
    whileexpr           := expression                                 (6.3.2.46)
  dorep                 := assignment [docount] | repexpr             (6.3.2.47)
    repexpr             := expression                                 (6.3.2.48)
    docount             := dot [dobf] | dob [dotf] | dof [dotb]       (6.3.2.49)
      dobf              := dob [dof] | dof [dob]                      (6.3.2.50)
      dotf              := dot [dof] | dof [dot]                      (6.3.2.51)
      dotb              := dot [dob] | dob [dot]                      (6.3.2.52)
      dot               := 'TO' toexpr                                (6.3.2.53)
        toexpr          := expression                                 (6.3.2.54)
      dob               := 'BY' byexpr                                (6.3.2.55)
        byexpr          := expression                                 (6.3.2.56)
      dof               := 'FOR' forexpr                              (6.3.2.57)
        forexpr         := expression                                 (6.3.2.58)
drop                    := 'DROP' variable_list                       (6.3.2.59)
  variable_list         := (vref | var_symbol)+                       (6.3.2.60)
exit                    := 'EXIT' [expression]                        (6.3.2.61)
interpret               := 'INTERPRET' expression                     (6.3.2.62)
iterate                 := 'ITERATE' [VAR_SYMBOL | Msg20.2 ]          (6.3.2.63)
leave                   := 'LEAVE' [VAR_SYMBOL | Msg20.2 ]            (6.3.2.64)
nop                     := 'NOP'                                      (6.3.2.65)
numeric                 := 'NUMERIC' (numeric_digits | numeric_form   (6.3.2.66)
                           | numeric_fuzz | Msg25.15)
  numeric_digits        := 'DIGITS' [expression]                      (6.3.2.67)
  numeric_form          := 'FORM' ('ENGINEERING' | 'SCIENTIFIC'       (6.3.2.68)
                           | valueexp | Msg25.11)
  numeric_fuzz          := 'FUZZ' [expression]                        (6.3.2.69)
options                 := 'OPTIONS' expression                       (6.3.2.70)
parse                   := 'PARSE'(parse_type | Msg25.12)             (6.3.2.71)
                           [template_list]
                           | 'PARSE' 'UPPER' (parse_type | Msg25.13)
                           [template_list]
  parse_type            := parse_key | parse_value | parse_var        (6.3.2.72)
    parse_key           := 'ARG' | 'PULL' | 'SOURCE' | 'LINEIN'       (6.3.2.73)
                           | 'VERSION'
    parse_value         := 'VALUE' [expression] ('WITH' | Msg38.3)    (6.3.2.74)
    parse_var           := 'VAR' var_symbol                           (6.3.2.75)
procedure               := 'PROCEDURE'                                (6.3.2.76)
                           ['EXPOSE' variable_list | Msg25.17]
pull                    := 'PULL' [template_list]                     (6.3.2.77)
push                    := 'PUSH' [expression]                        (6.3.2.78)
queue                   := 'QUEUE' [expression]                       (6.3.2.79)
return                  := 'RETURN' [expression]                      (6.3.2.80)
say                     := 'SAY' [expression]                         (6.3.2.81)
signal                  := 'SIGNAL' (signal_spec | valueexp           (6.3.2.82)
                           | taken_constant | Msg19.4)
  signal_spec           := 'ON' (condition | Msg25.3)                 (6.3.2.83)
                           ['NAME' (taken_constant | Msg19.3)]
                           | 'OFF' (condition | Msg25.4)
    condition           := callable_condition | 'NOVALUE' | 'SYNTAX'  (6.3.2.84)
                           | 'LOSTDIGITS'
trace                   := 'TRACE'                                    (6.3.2.85)
                           [(taken_constant | Msg19.6) | valueexp]


/*----------------------------------------------------------------------------*/
/* Note: The next section describes templates.                                */
/*----------------------------------------------------------------------------*/

template_list           := template | [template] ',' [template_list]  (6.3.2.86)
  template              := (trigger | target | Msg38.1)+              (6.3.2.87)
    target              := VAR_SYMBOL | '.'                           (6.3.2.88)
    trigger             := pattern | positional                       (6.3.2.89)
      pattern           := STRING | vrefp                             (6.3.2.90)
        vrefp           := '(' (VAR_SYMBOL | Msg19.7) (')' | Msg46.1) (6.3.2.91)
      positional        := absolute_positional | relative_positional  (6.3.2.92)
        absolute_positional  := NUMBER | '=' position                 (6.3.2.93)
          position      := NUMBER | vrefp | Msg38.2                   (6.3.2.94)
      relative_positional := ('+' | '-') position                     (6.3.2.95)


/*----------------------------------------------------------------------------*/
/* Note: The final part specifies the various forms of symbol,                */
/*       and expression.                                                      */
/*----------------------------------------------------------------------------*/

symbol                  := VAR_SYMBOL | CONST_SYMBOL | NUMBER         (6.3.2.96)
expression              := expr [(',' Msg37.1) | (')' Msg37.2 )]      (6.3.2.97)
  expr                  := expr_alias                                 (6.3.2.98)
    expr_alias          := and_expression                             (6.3.2.99)
                           | expr_alias or_operator and_expression
      or_operator       := '|' | '&&'                                (6.3.2.100)
      and_expression    := comparison                                (6.3.2.101)
                           | and_expression '&' comparison
comparison              := concatenation                             (6.3.2.102)
                           | comparison comparison_operator concatenation
  comparison_operator   := normal_compare | strict_compare           (6.3.2.103)
    normal_compare      := '=' | '\=' | '<>' | '><' | '>' | '<'      (6.3.2.104)
                           | '>=' | '<=' | '\>' | '\<'
    strict_compare      := '==' | '\==' | '>>' | '<<' | '>>='        (6.3.2.105)
                           | '<<=' | '\>>' | '\<<'
concatenation           := addition                                  (6.3.2.106)
                           | concatenation (' ' | '||') addition     
addition                := multiplication                            (6.3.2.107)
                           | addition additive_operator multiplication
  additive_operator     := '+' | '-'                                 (6.3.2.108)
multiplication          := power_expression                          (6.3.2.109)
                           | multiplication multiplicative_operator
                           power_expression
  multiplicative_operator := '*' | '/' | '//' | '%'                  (6.3.2.110)
power_expression        := prefix_expression                         (6.3.2.111)
                           | power_expression '**' prefix_expression
  prefix_expression     := ('+' | '-' | '\') prefix_expression       (6.3.2.112)
                           | term | Msg35.1
    term                := symbol | STRING | function                (6.3.2.113)
                           | '(' expr_alias (',' Msg37.1 | ')' | Msg36)
      function          := taken_constant '(' [expression_list]      (6.3.2.114)
                           (')' | Msg36)
....+....1....+....2....+....3....+....4....+....5....+....6....+....7....+....8
